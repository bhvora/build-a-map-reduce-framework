package reducer;

import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;

import utils.Constants;
import serverHandling.ReducerDescription;
import slave.Client;
import utils.Context;

/**
 * Class to process reduce tasks.
 *
 */
public class ReducerReader {

	static ReducerDescription description;
	static Client client;
	static Context context=null;
	static Method method;
	static Object instance=null;
	
	/**
	 * Method to set the reducer data using the reducer description and create a new
	 * instance of the reducer using JAVA reflection.
	 * @param des
	 * @param cli
	 */
	public static void setData(ReducerDescription des,Client cli){
		description= des;
		client=cli;
		context=new Context();
		context.object="Reducer";
		context.client=client;
		try{
			
			Class reduceClass=Class.forName(description.ReducerClass);
			method=reduceClass.getDeclaredMethod("reduce",Object.class,FileInputStream.class,Context.class);
			// Java reflection
			instance=reduceClass.newInstance();
		} catch(Exception e){
		}
	}
	
	/**
	 * Method to execute the reducer by reading intermediate valueds generated by Mapper
	 * and invoke the reduce function for each key in the temporary file.
	 */
	public static void executeReducer(){
		try{
			File file=new File(Constants.TEMP_FOLDER);
			File files[]=file.listFiles();
			for(int i=0;i<files.length;i++){
				callReducer(files[i]);
				files[i].delete();
			}
			client.writeToServer(Constants.CLOSE);
		}catch(Exception e){
		}
	}
	
	/**
	 * Method to invoke the reduce method of reducer on a file and perform the reduce tasks.
	 * @param file
	 */
	public static void callReducer(File file) {
		String key=file.getName();
		try {
			FileInputStream stream=new FileInputStream(file);
			//invoke the reducer.
			method.invoke(instance,new Object[]{key,stream,context});
		} catch (Exception e) {
		}
	}
}
